/**
 * 内容清理器测试
 * 验证各种清理功能的正确性
 */

import { describe, test, expect, beforeEach, afterEach, vi } from 'vitest';
import { ContentCleaner } from '../src/ContentCleaner.js';

// 创建模拟DOM元素的辅助函数
function createMockElement(innerHTML, textContent) {
  const children = [];
  const element = {
    innerHTML: innerHTML || '',
    textContent: textContent || innerHTML || '',
    innerText: textContent || innerHTML || '',
    children,
    tagName: 'DIV',
    classList: {
      contains: () => false
    },
    hasAttribute: () => false,
    getAttribute: () => null,
    remove: vi.fn(),
    querySelector: vi.fn(() => null),
    querySelectorAll: vi.fn(() => []),
    cloneNode: vi.fn(() => createMockElement(innerHTML, textContent))
  };
  
  // 模拟querySelectorAll返回的元素数组
  element.querySelectorAll = vi.fn((selector) => {
    if (selector.includes('puretext-copy-btn')) {
      return [{ textContent: '复制', remove: vi.fn() }];
    }
    if (selector.includes('button')) {
      return [
        { textContent: '复制', remove: vi.fn() },
        { textContent: '分享', remove: vi.fn() },
        { textContent: '重要按钮', remove: vi.fn() }
      ];
    }
    return [];
  });
  
  return element;
}

describe('ContentCleaner', () => {
  let cleaner;
  
  beforeEach(() => {
    cleaner = new ContentCleaner();
  });
  
  afterEach(() => {
    cleaner.clearRules();
  });
  
  describe('基本功能', () => {
    test('应该能够创建实例', () => {
      expect(cleaner).toBeInstanceOf(ContentCleaner);
      expect(cleaner.cleaningRules).toBeInstanceOf(Map);
    });
    
    test('应该能够注册清理规则', () => {
      const rule = vi.fn();
      cleaner.registerCleaningRule('test.com', rule);
      
      expect(cleaner.cleaningRules.get('test.com')).toContain(rule);
    });
    
    test('应该能够清除所有规则', () => {
      cleaner.registerCleaningRule('test.com', vi.fn());
      cleaner.clearRules();
      
      expect(cleaner.cleaningRules.size).toBe(0);
    });
  });
  
  describe('按钮移除功能', () => {
    test('应该识别操作按钮', () => {
      expect(cleaner.isOperationButton('复制')).toBe(true);
      expect(cleaner.isOperationButton('分享')).toBe(true);
      expect(cleaner.isOperationButton('Copy')).toBe(true);
      expect(cleaner.isOperationButton('重要内容')).toBe(false);
      expect(cleaner.isOperationButton('确定')).toBe(false);
    });
    
    test('应该移除PureText按钮', () => {
      const element = createMockElement();
      const mockButtons = [
        { textContent: '复制', remove: vi.fn() },
        { textContent: '分享', remove: vi.fn() }
      ];
      
      element.querySelectorAll = vi.fn((selector) => {
        if (selector.includes('puretext')) {
          return mockButtons;
        }
        return [];
      });
      
      cleaner.removeButtons(element);
      
      mockButtons.forEach(btn => {
        expect(btn.remove).toHaveBeenCalled();
      });
    });
  });
  
  describe('AI声明移除功能', () => {
    test('应该移除中文AI声明', async () => {
      const element = createMockElement();
      const mockElements = [
        { textContent: '本回答由AI生成，内容仅供参考', remove: vi.fn() },
        { textContent: '正常内容', remove: vi.fn() },
        { textContent: 'AI生成的回答', remove: vi.fn() }
      ];
      
      element.querySelectorAll = vi.fn(() => mockElements);
      
      cleaner.removeAIStatements(element);
      
      expect(mockElements[0].remove).toHaveBeenCalled();
      expect(mockElements[1].remove).not.toHaveBeenCalled();
      expect(mockElements[2].remove).toHaveBeenCalled();
    });
    
    test('应该移除英文AI声明', async () => {
      const element = createMockElement();
      const mockElements = [
        { textContent: 'This response was generated by AI for reference only', remove: vi.fn() },
        { textContent: 'Generated by AI', remove: vi.fn() },
        { textContent: 'Normal content', remove: vi.fn() }
      ];
      
      element.querySelectorAll = vi.fn(() => mockElements);
      
      cleaner.removeAIStatements(element);
      
      expect(mockElements[0].remove).toHaveBeenCalled();
      expect(mockElements[1].remove).toHaveBeenCalled();
      expect(mockElements[2].remove).not.toHaveBeenCalled();
    });
  });
  
  describe('推荐问题识别功能', () => {
    test('应该识别中文推荐问题', () => {
      expect(cleaner.isRecommendedQuestion('如何提高工作效率？')).toBe(true);
      expect(cleaner.isRecommendedQuestion('什么是人工智能？')).toBe(true);
      expect(cleaner.isRecommendedQuestion('为什么会出现这种情况？')).toBe(true);
      expect(cleaner.isRecommendedQuestion('这是一个正常的陈述句。')).toBe(false);
      expect(cleaner.isRecommendedQuestion('很长的文本内容，超过150个字符的内容通常不会被识别为推荐问题，因为推荐问题通常比较简短，这样的长文本更可能是正常的回答内容而不是推荐的后续问题。')).toBe(false);
    });
    
    test('应该识别英文推荐问题', () => {
      expect(cleaner.isRecommendedQuestion('How to improve productivity?')).toBe(true);
      expect(cleaner.isRecommendedQuestion('What is artificial intelligence?')).toBe(true);
      expect(cleaner.isRecommendedQuestion('Can you help me with this?')).toBe(true);
      expect(cleaner.isRecommendedQuestion('This is a normal statement.')).toBe(false);
    });
    
    test('应该识别特定领域问题', () => {
      expect(cleaner.isRecommendedQuestion('保证金比例是多少？')).toBe(true);
      expect(cleaner.isRecommendedQuestion('期货交易有什么风险？')).toBe(true);
      expect(cleaner.isRecommendedQuestion('API接口如何调用？')).toBe(true);
    });
  });
  
  describe('独立问题判断功能', () => {
    test('应该识别独立问题元素', () => {
      const questionElement = {
        textContent: '如何提高效率？',
        children: [],
        remove: vi.fn()
      };
      
      expect(cleaner.isStandaloneQuestion(questionElement)).toBe(true);
    });
    
    test('应该识别包含其他内容的复杂元素', () => {
      const complexElement = {
        textContent: '这是一个包含问题的复杂元素：如何提高效率？还有其他重要内容。',
        children: [
          { textContent: '重要内容1' },
          { textContent: '重要内容2' },
          { textContent: '重要内容3' },
          { textContent: '重要内容4' }
        ],
        remove: vi.fn()
      };
      
      expect(cleaner.isStandaloneQuestion(complexElement)).toBe(false);
    });
  });
  
  describe('导航元素识别功能', () => {
    test('应该识别导航元素', () => {
      const navElement1 = { textContent: '首页 | 关于我们 | 联系我们' };
      const navElement2 = { textContent: 'Home | About | Contact' };
      const contentElement = { textContent: '这是一段很长的正文内容，包含了详细的信息和说明，不应该被识别为界面元素，因为它包含了大量的文本内容，超过了200个字符的限制，所以应该被认为是正常的内容而不是界面元素，这里没有任何界面相关的关键词，只是普通的文章内容，用来测试系统的识别能力。' };
      
      expect(cleaner.isNavigationElement(navElement1)).toBe(true);
      expect(cleaner.isNavigationElement(navElement2)).toBe(true);
      expect(cleaner.isNavigationElement(contentElement)).toBe(false);
    });
  });
  
  describe('空元素处理功能', () => {
    test('应该识别空元素', () => {
      const emptyElement = {
        textContent: '',
        children: [],
        tagName: 'DIV'
      };
      
      const nonEmptyElement = {
        textContent: '有内容',
        children: [],
        tagName: 'DIV'
      };
      
      expect(cleaner.isEmpty(emptyElement)).toBe(true);
      expect(cleaner.isEmpty(nonEmptyElement)).toBe(false);
    });
    
    test('应该判断元素是否可以安全移除', () => {
      const safeElement = {
        tagName: 'DIV',
        id: '',
        hasAttribute: () => false
      };
      
      const importantElement = {
        tagName: 'MAIN',
        id: '',
        hasAttribute: () => false
      };
      
      const elementWithId = {
        tagName: 'DIV',
        id: 'important-id',
        hasAttribute: () => false
      };
      
      expect(cleaner.isSafeToRemove(safeElement)).toBe(true);
      expect(cleaner.isSafeToRemove(importantElement)).toBe(false);
      expect(cleaner.isSafeToRemove(elementWithId)).toBe(false);
    });
  });
  
  describe('网站特定清理功能', () => {
    test('应该应用Kimi网站特定规则', async () => {
      const element = createMockElement();
      const mockKimiElements = [
        { remove: vi.fn() },
        { remove: vi.fn() }
      ];
      
      element.querySelectorAll = vi.fn((selector) => {
        if (selector.includes('segment-generate-tip') || selector.includes('segment-assistant-actions')) {
          return mockKimiElements;
        }
        return [];
      });
      
      await cleaner.applyCustomRules(element, 'www.kimi.com');
      
      mockKimiElements.forEach(el => {
        expect(el.remove).toHaveBeenCalled();
      });
    });
    
    test('应该应用DeepSeek网站特定规则', async () => {
      const element = createMockElement();
      const mockDeepSeekElements = [{ remove: vi.fn() }];
      
      element.querySelectorAll = vi.fn((selector) => {
        if (selector.includes('action') || selector.includes('toolbar')) {
          return mockDeepSeekElements;
        }
        return [];
      });
      
      await cleaner.applyCustomRules(element, 'chat.deepseek.com');
      
      mockDeepSeekElements.forEach(el => {
        expect(el.remove).toHaveBeenCalled();
      });
    });
  });
  
  describe('完整清理流程', () => {
    test('应该执行完整的清理流程', async () => {
      const element = createMockElement();
      
      // 模拟各种需要清理的元素
      const mockElements = {
        buttons: [{ textContent: '复制', remove: vi.fn(), children: [] }],
        aiStatements: [{ textContent: '本回答由AI生成', remove: vi.fn(), children: [] }],
        questions: [{ textContent: '如何提高效率？', remove: vi.fn(), children: [] }],
        navigation: [{ textContent: '首页', remove: vi.fn(), children: [] }]
      };
      
      element.querySelectorAll = vi.fn((selector) => {
        if (selector.includes('puretext') || selector === 'button') {
          return mockElements.buttons;
        }
        if (selector === '*') {
          return [...mockElements.aiStatements, ...mockElements.questions];
        }
        if (selector.includes('nav') || selector.includes('menu')) {
          return mockElements.navigation;
        }
        return [];
      });
      
      await cleaner.clean(element, 'test.example.com');
      
      // 验证所有清理步骤都被执行
      // 注意：由于模拟的复杂性，这里主要验证方法被调用
      expect(element.querySelectorAll).toHaveBeenCalledWith(expect.stringContaining('puretext'));
    });
  });
});